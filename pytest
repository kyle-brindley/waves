#! /usr/bin/env python

import pathlib

# Inherit the parent construction environment
Import("env")

build_directory = pathlib.Path(Dir(".").abspath)

pytest_source_list = [
    "pyproject.toml",
]

# Common task options
pytest_command = "cd ${package_dir} && pytest -n 4 "
if env["unconditional_build"]:
    pytest_command += " --unconditional-build"

# Unit tests
pytest_node = env.Command(
    target=["coverage.xml", Dir("./coverage")],
    source=pytest_source_list,
    action=[
        (
            '${pytest_command} -vvv -m "not systemtest" --cov --cov-report=term '
            "--cov-report=xml:${TARGETS[0].abspath} --cov-report=html:${TARGETS[1].abspath}"
        )
    ],
    pytest_command=pytest_command,
)
env.Alias("pytest", pytest_node)
env.Clean("pytest", Dir("./coverage"))
# Always run pytests in place of a complete source list
env.AlwaysBuild(pytest_node)

# System tests
source = pytest_source_list + [env["package_dir"] / "_tests/test_system.py"]
systemtest_node = env.Command(
    target=["systemtest_results.xml"],
    source=source,
    action=[
        (
            "${pytest_command} -v --no-showlocals -m systemtest --tb=short --cache-clear "
            "--junitxml=${TARGETS[0].abspath} "
            "--system-test-dir=${system_test_directory} "
            "--abaqus-command=${abaqus} "
            "--cubit-command=${cubit} "
        ),
    ],
    pytest_command=pytest_command,
    system_test_directory=build_directory,
    abaqus=env["abaqus"] if "abaqus" in env else None,
    cubit=env["cubit"] if "cubit" in env else None,
)
env.Alias("systemtest", systemtest_node)
env.AlwaysBuild(systemtest_node)
env.Clean(systemtest_node, [Dir(build_directory)])

# Collector alias to build all regression tasks
env.Alias("regression", pytest_node + systemtest_node)
