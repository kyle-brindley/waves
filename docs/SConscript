#! /usr/bin/env python
import pathlib

# Inherit the parent construction environment
Import(["env", "project_substitution_dictionary"])

# VVV Sphinx prototypes
# TODO: boostrap from waves.scons_extensions.sphinx_scanner *after* the function is deployed on conda-forge
# DO NOT 'bootstrap' by importing the current/repository version of WAVES. That's not bootstrapping, it's a bug factory
import re
import SCons.Scanner


def sphinx_scanner():
    suffixes = [".rst", ".txt"]
    flags = re.MULTILINE
    expression = re.compile(r"^\s*\.\. (?:include|literalinclude|figure|bibliography)::\s*(.+)$", flags)

    def suffix_only(node_list):
        return [node for node in node_list if node.path.endswith(tuple(suffixes))]

    def regex_scan(node, env, path):
        contents = node.get_text_contents()
        includes = expression.findall(contents)
        includes = [file.strip() for file in includes]
        return includes

    custom_scanner = SCons.Scanner.Scanner(function=regex_scan, skeys=suffixes, recursive=suffix_only)
    return custom_scanner


def sphinx_build(program="sphinx-build", options="", builder="html", tags=""):
    sphinx_builder = Builder(
        action=["${program} ${options} -b ${builder} ${TARGET.dir.dir.abspath} ${TARGET.dir.abspath} ${tags}"],
        program=program,
        options=options,
        builder=builder,
        tags=tags,
    )
    return sphinx_builder


def sphinx_latexpdf(program="sphinx-build", options="", builder="latexpdf", tags=""):
    sphinx_latex = SCons.Builder.Builder(
        action=["${program} -M ${builder} ${TARGET.dir.dir.abspath} ${TARGET.dir.dir.abspath} ${tags} ${options}"],
        program=program,
        options=options,
        builder=builder,
        tags=tags,
    )
    return sphinx_latex


# ^^^ Sphinx prototypes


env.Append(SCANNERS=sphinx_scanner())
env.Append(
    BUILDERS={
        "SphinxBuild": sphinx_build(program=env["sphinx_build"], options="-W"),
        "SphinxPDF": sphinx_latexpdf(program=env["sphinx_build"], options="-W"),
    }
)

# Perform variable substitution on Sphinx configuration file
env.Substfile(
    "conf.py.in",
    SUBST_DICT=project_substitution_dictionary,
)

env.Substfile(
    "_static/custom.css.in",
    SUBST_DICT=project_substitution_dictionary,
)

# Copy root directory files into documentation build directory
copy_files = (
    ("README.txt", "#/README.rst"),
    ("CITATION.bib", "#/CITATION.bib"),
    ("LICENSE.txt", "#/LICENSE.txt"),
    ("environment.yml", "#/environment.yml"),
)
for target, source in copy_files:
    Command(
        target=target,
        source=source,
        action=Copy("$TARGET", "$SOURCE"),
    )

# Explicit Sphinx documentation dependency list
sphinx_configuration_source_list = [
    "conf.py",  # Generated by an SCons target
    # Not strictly required for all Sphinx build types, so not always found by the scanner.
    # It is required for Sphinx configuration, so it needs to be explicitly included in the deps list.
    "CITATION.bib",  # Copied from CITATION.bib to docs build directory by root SConscript
    "references.bib",
    "environment.yml",  # Copied from environment.yml to docs build directory by root SConscript
    "targets.txt",  # Found in conf.py, which is not currently scanned
    "_static/waves_logo_brandmark_smaller.png",  # Found in conf.py, which is not currently scanned
    "waves_logo_primary_large_crop.png",  # Found in conf.py, which is not currently scanned
    "favicon.ico",  # Found in conf.py, which is not currently scanned
    "_static/custom.css",
    "_static/custom.js",
    "_static/wave.svg",
]

documentation_file_list = [
    "tutorial_api.rst",
    "tutorial_cli.rst",
    "api.rst",
    "internal_api.rst",
    "changelog.rst",
    "citation.rst",
    "license.rst",
    "cli.rst",
    "computational_practices_introduction.rst",
    "computational_practices_version_control.rst",
    "computational_practices_documentation.rst",
    "computational_practices_build_system.rst",
    "computational_practices_compute_environment.rst",
    "computational_practices_regression_testing.rst",
    "computational_practices_archival.rst",
    "devops.rst",
    "glossary.rst",
    "index.rst",
    "release_philosophy.rst",
    "scons_quickstart.rst",
    "scons_multiactiontask.rst",
    "abstract.rst",
    "installation.rst",
    "tutorial_introduction.rst",
    "tutorial_core.rst",
    "tutorial_supplemental.rst",
    "tutorial_wip.rst",
    "templates.rst",
    "tutorial_00_scons.rst",
    "tutorial_01_geometry.rst",
    "tutorial_02_partition_mesh.rst",
    "tutorial_argparse_types.rst",
    "tutorial_03_solverprep.rst",
    "tutorial_04_simulation.rst",
    "tutorial_05_parameter_substitution.rst",
    "tutorial_06_include_files.rst",
    "tutorial_07_cartesian_product.rst",
    "tutorial_07_latin_hypercube.rst",
    "tutorial_07_sobol_sequence.rst",
    "tutorial_07_one_at_a_time.rst",
    "tutorial_extend_study.rst",
    "tutorial_08_data_extraction.rst",
    "tutorial_09_post_processing.rst",
    "tutorial_sensitivity_study.rst",
    "tutorial_10_unit_testing.rst",
    "tutorial_11_regression_testing.rst",
    "tutorial_12_archival.rst",
    "tutorial_writing_builders.rst",
    "tutorial_setuptools_scm.rst",
    "tutorial_cubit_abaqus.rst",
    "tutorial_cubit_sierra.rst",
    "tutorial_cubit_fierro.rst",
    "tutorial_gmsh_calculix.rst",
    "tutorial_quinoa.rst",
    "tutorial_mesh_convergence.rst",
    "tutorial_escape_sequences.rst",
    "tutorial_remote_execution.rst",
    "tutorial_sbatch.rst",
    "tutorial_task_reuse.rst",
    "tutorial_part_image.rst",
    "tutorial_quickstart.rst",
    "waves_quickstart.rst",
    "tutorial_abaqus_cae.rst",
    "zreferences.rst",
]

# Copy tutorial files to the build/docs directory
tutorial_files_list = [
    env["tutorials_dir"] / "tutorial_00_SConstruct",
    env["tutorials_dir"] / "tutorial_01_geometry",
    env["tutorials_dir"] / "tutorial_01_geometry_SConstruct",
    env["tutorials_dir"] / "tutorial_02_partition_mesh",
    env["tutorials_dir"] / "tutorial_02_partition_mesh_SConstruct",
    env["tutorials_dir"] / "tutorial_argparse_types",
    env["tutorials_dir"] / "tutorial_argparse_types_SConstruct",
    env["tutorials_dir"] / "tutorial_03_solverprep",
    env["tutorials_dir"] / "tutorial_03_solverprep_SConstruct",
    env["tutorials_dir"] / "tutorial_04_simulation",
    env["tutorials_dir"] / "tutorial_04_simulation_SConstruct",
    env["tutorials_dir"] / "tutorial_05_parameter_substitution",
    env["tutorials_dir"] / "tutorial_05_parameter_substitution_SConstruct",
    env["tutorials_dir"] / "tutorial_06_include_files",
    env["tutorials_dir"] / "tutorial_06_include_files_SConstruct",
    env["tutorials_dir"] / "tutorial_07_cartesian_product",
    env["tutorials_dir"] / "tutorial_07_cartesian_product_SConstruct",
    env["tutorials_dir"] / "tutorial_07_latin_hypercube",
    env["tutorials_dir"] / "tutorial_07_latin_hypercube_SConstruct",
    env["tutorials_dir"] / "tutorial_07_sobol_sequence",
    env["tutorials_dir"] / "tutorial_07_sobol_sequence_SConstruct",
    env["tutorials_dir"] / "tutorial_07_one_at_a_time",
    env["tutorials_dir"] / "tutorial_07_one_at_a_time_SConstruct",
    env["tutorials_dir"] / "tutorial_08_data_extraction",
    env["tutorials_dir"] / "tutorial_08_data_extraction_SConstruct",
    env["tutorials_dir"] / "tutorial_09_post_processing",
    env["tutorials_dir"] / "tutorial_09_post_processing_SConstruct",
    env["tutorials_dir"] / "tutorial_10_unit_testing_SConstruct",
    env["tutorials_dir"] / "tutorial_11_regression_testing",
    env["tutorials_dir"] / "tutorial_11_regression_testing_SConstruct",
    env["tutorials_dir"] / "tutorial_12_archival",
    env["tutorials_dir"] / "tutorial_12_archival_SConstruct",
    env["tutorials_dir"] / "tutorial_sensitivity_study",
    env["tutorials_dir"] / "tutorial_sensitivity_study_SConstruct",
    env["tutorials_dir"] / "tutorial_setuptools_scm_SConstruct",
    env["tutorials_dir"] / "tutorial_escape_sequences",
    env["tutorials_dir"] / "tutorial_escape_sequences_SConstruct",
    env["tutorials_dir"] / "tutorial_extend_study",
    env["tutorials_dir"] / "tutorial_extend_study_SConstruct",
    env["tutorials_dir"] / "tutorial_mesh_convergence",
    env["tutorials_dir"] / "tutorial_mesh_convergence_SConstruct",
    env["tutorials_dir"] / "tutorial_remote_execution",
    env["tutorials_dir"] / "tutorial_remote_execution_SConstruct",
    env["tutorials_dir"] / "tutorial_sbatch",
    env["tutorials_dir"] / "tutorial_sbatch_SConstruct",
    env["tutorials_dir"] / "tutorial_task_reuse",
    env["tutorials_dir"] / "tutorial_task_reuse_SConstruct",
    env["tutorials_dir"] / "tutorial_part_image",
    env["tutorials_dir"] / "tutorial_part_image_SConstruct",
    env["tutorials_dir"] / "unit_testing",
    env["tutorials_dir"] / "rectangle_geometry_partition.scons",
    env["tutorials_dir"] / "rectangle_mesh_solverprep_solve_extract.scons",
    env["tutorials_dir"] / "gitignore",
    env["tutorials_dir"] / "pyproject.toml",
    env["tutorials_dir"] / env["abaqus_dir"] / "rectangle_geometry.py",
    env["tutorials_dir"] / env["abaqus_dir"] / "rectangle_partition.py",
    env["tutorials_dir"] / env["abaqus_dir"] / "rectangle_mesh.py",
    env["tutorials_dir"] / env["abaqus_dir"] / "abaqus_utilities.py",
    env["tutorials_dir"] / env["abaqus_dir"] / "export_abaqus_image.py",
    env["tutorials_dir"] / env["abaqus_dir"] / "rectangle_compression.inp",
    env["tutorials_dir"] / env["abaqus_dir"] / "assembly.inp",
    env["tutorials_dir"] / env["abaqus_dir"] / "boundary.inp",
    env["tutorials_dir"] / env["abaqus_dir"] / "field_output.inp",
    env["tutorials_dir"] / env["abaqus_dir"] / "history_output.inp",
    env["tutorials_dir"] / env["abaqus_dir"] / "materials.inp",
    env["tutorials_dir"] / env["abaqus_dir"] / "parts.inp",
    env["tutorials_dir"] / env["abaqus_dir"] / "rectangle_compression.inp.in",
    env["tutorials_dir"] / env["argparse_types_dir"] / "rectangle_geometry.py",
    env["tutorials_dir"] / env["argparse_types_dir"] / "rectangle_partition.py",
    env["tutorials_dir"] / env["argparse_types_dir"] / "rectangle_mesh.py",
    env["tutorials_dir"] / env["cubit_dir"] / "rectangle_geometry.py",
    env["tutorials_dir"] / env["cubit_dir"] / "rectangle_partition.py",
    env["tutorials_dir"] / env["cubit_dir"] / "rectangle_mesh.py",
    env["tutorials_dir"] / env["cubit_dir"] / "cube_geometry.py",
    env["tutorials_dir"] / env["cubit_dir"] / "cube_partition.py",
    env["tutorials_dir"] / env["cubit_dir"] / "cube_mesh.py",
    env["tutorials_dir"] / env["modsim_dir"] / "argparse_types.py",
    env["tutorials_dir"] / env["python_dir"] / "rectangle_compression_nominal.py",
    env["tutorials_dir"] / env["python_dir"] / "rectangle_compression_cartesian_product.py",
    env["tutorials_dir"] / env["python_dir"] / "rectangle_compression_cartesian_product.csv",
    env["tutorials_dir"] / env["python_dir"] / "rectangle_compression_latin_hypercube.py",
    env["tutorials_dir"] / env["python_dir"] / "rectangle_compression_sobol_sequence.py",
    env["tutorials_dir"] / env["python_dir"] / "rectangle_compression_sensitivity_study.py",
    env["tutorials_dir"] / env["python_dir"] / "rectangle_compression_mesh_convergence.py",
    env["tutorials_dir"] / env["python_dir"] / "mesh_convergence_stress.yaml",
    env["tutorials_dir"] / env["python_dir"] / "post_processing.py",
    env["tutorials_dir"] / env["python_dir"] / "regression.py",
    env["tutorials_dir"] / env["python_dir"] / "sensitivity_study.py",
    env["tutorials_dir"] / env["tests_dir"] / "test_regression.py",
    env["tutorials_dir"] / "tutorial_cubit/cubit",
    env["tutorials_dir"] / "tutorial_cubit/abaqus",
    env["tutorials_dir"] / "tutorial_cubit/sierra",
    env["tutorials_dir"] / "tutorial_cubit/fierro",
    env["tutorials_dir"] / "tutorial_cubit/SConstruct",
    env["tutorials_dir"] / "tutorial_gmsh/SConstruct",
    env["tutorials_dir"] / "tutorial_gmsh/SConscript",
    env["tutorials_dir"] / "tutorial_gmsh/rectangle.py",
    env["tutorials_dir"] / "tutorial_gmsh/rectangle_compression.inp.in",
    env["tutorials_dir"] / "tutorial_cubit/modsim_package/sierra/rectangle_compression.i",
    env["tutorials_dir"] / "tutorial_cubit/modsim_package/fierro/cube_compression.yaml",
    env["tutorials_dir"] / "tutorial_cubit/modsim_package/fierro/convert_to_vtk2ascii.py",
    env["tutorials_dir"] / "tutorial_quinoa/SConstruct",
    env["tutorials_dir"] / "tutorial_quinoa/SConscript",
    env["tutorials_dir"] / "tutorial_quinoa/box.py",
    env["tutorials_dir"] / "tutorial_quinoa/flow.lua",
    env["tutorials_dir"] / "waves_quickstart/SConstruct",
    env["tutorials_dir"] / "waves_quickstart/SConscript",
    env["tutorials_dir"] / "tutorial_abaqus_cae/SConscript",
    env["tutorials_dir"] / "tutorial_abaqus_cae/submit_cae.py",
    env["tutorials_dir"] / "scons_quickstart/SConscript",
    env["tutorials_dir"] / "multi_action_task/SConscript",
    env["tutorials_dir"] / "tutorial_writing_builders/SConstruct",
    env["tutorials_dir"] / "tutorial_writing_builders/implicit_workflow",
    env["tutorials_dir"] / "tutorial_writing_builders/scons_extensions.py",
    env["tutorials_dir"] / "tutorial_writing_builders/test_scons_extensions.py",
]
copied_file_list = []
for file_path in tutorial_files_list:
    target = f"{file_path.parts[-2]}_{file_path.name}"
    Command(
        target=target,
        source=str(file_path),
        action=Copy("$TARGET", "$SOURCE"),
    )
    copied_file_list.append(target),
source_files = sphinx_configuration_source_list + documentation_file_list + copied_file_list

html_targets = [
    f"{pathlib.Path(source).with_suffix('.html')}" for source in documentation_file_list if source.endswith(".rst")
]
html_directory = "html"
html_target = [f"{html_directory}/{target}" for target in html_targets]
html = env.SphinxBuild(
    target=html_target,
    source=source_files,
    builder="html",
)
env.Clean(html, [Dir(html_directory)] + documentation_file_list)
env.Alias(html_directory, html)

# TODO: Combine the two html build logic
internal_directory = "html-internal"
internal_target = [f"{internal_directory}/{target}" for target in html_targets]
internal = env.SphinxBuild(
    target=internal_target,
    source=source_files,
    builder="html",
    tags="-t aea",
)
env.Clean(internal, [Dir(internal_directory)] + documentation_file_list)
env.Alias(internal_directory, internal)

waves_pdf = pathlib.Path(f"latex/{project_substitution_dictionary['@documentation_pdf@']}")
latex_directory = "latex"
latex_target = [str(waves_pdf)]
latexpdf = env.SphinxPDF(
    target=latex_target,
    source=source_files,
)
env.Clean(latexpdf, [Dir(latex_directory)] + documentation_file_list)
env.Alias("latexpdf", latexpdf)

man_directory = "man"
man_target = [f"{man_directory}/waves.1"]
man_source = [
    "man_index.rst",
    "ssh_builder_actions_warning.txt",  # Required by ``ssh_builder_actions`` docstring and not found in man_index.rst
]
man = env.SphinxBuild(
    target=man_target,
    source=man_source + sphinx_configuration_source_list,
    builder="man",
    tags="-t man",
)
env.Clean(man, [Dir(man_directory)] + documentation_file_list)
env.Alias(man_directory, man)

# TODO: Depends on ``imagemagick`` package, which isn't part of the CI environment yet
epub_cover = "waves_epub_cover.png"
env.Command(
    target=[f"epub/_static/{epub_cover}"],
    source=[str(waves_pdf)],
    action=["convert -density 300 ${SOURCE.abspath}[0] ${TARGET.abspath}"],
)

waves_epub = waves_pdf.with_suffix(".epub").name
epub_directory = "epub"
epub_target = [f"{epub_directory}/{waves_epub}"]
epub = env.SphinxBuild(
    target=epub_target,
    source=source_files + [f"epub/_static/{epub_cover}"],
    builder="epub",
)
env.Clean(epub, [Dir(epub_directory)] + documentation_file_list)
env.Alias(epub_directory, epub)

# Collector alias to build all documentation and regression
env.Alias("documentation", html + latexpdf + man)
env.Alias("regression", html + latexpdf + man + internal)

if not env["unconditional_build"] and not env["sphinx_build"]:
    print("Program 'sphinx-build' was not found in construction environment. Ignoring Sphinx target(s)")
    Ignore([".", html_directory, "html", "documentation", "regression"], html)
    Ignore([".", internal_directory, "html-internal", "regression"], internal)
    Ignore([".", latex_directory, "latexpdf", "documentation", "regression"], latexpdf)
    Ignore([".", man_directory, "man", "documentation", "regression"], man)
    Ignore([".", epub_directory, "epub"], epub)
if not env["unconditional_build"] and not env["latexmk"]:
    print("Program 'latexmk' was not found in construction environment. Ignoring Sphinx LaTeXPDF target(s)")
    Ignore([".", latex_directory, "latexpdf", "documentation", "regression"], latexpdf)
