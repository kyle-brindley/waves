.linux-cached-environment: &linux-cached-environment
  variables:
    GIT_STRATEGY: clone
    conda_installation: "/apps/anaconda/3.12-anaconda-2024.10"
    aea_compute_path: "/projects/aea_compute"
    ci_environment_path: "/projects_aea_compute"
    scratch_root: "/scratch"
    abaqus_command_prefix: "/apps/abaqus/Commands"
    cubit_command_prefix: "/apps"
  before_script:
    - function check_directory_variable () { echo "$1"; if [[ -z $1 ]] || [[ ! -d $1 ]]; then exit 1; fi; }
    - check_directory_variable "${conda_installation}"
    - check_directory_variable "${aea_compute_path}"
    - check_directory_variable "${ci_environment_path}"
    - check_directory_variable "${scratch_root}"
    - check_directory_variable "${abaqus_command_prefix}"
    - check_directory_variable "${cubit_command_prefix}"
    # Remove when AEA RHEL ``all_proxy`` environment variable is removed or set to empty
    - export all_proxy=''
    # Handle mixed AEA/HPC jobs
    - scratch_path="${scratch_root}/${USER}"
    - check_directory_variable "${scratch_path}"
    # Prep module command and load system module(s)
    - module load texlive
    # Activate CI environment if available. If not, rely on environment job running before other jobs.
    - module use ${PWD}/modulefiles
    - project_environment='waves-env'
    - if [[ -z ${project_environment} ]]; then exit 1; fi
    - environment_path="${ci_environment_path}/${project_environment}"
    - echo ${environment_path}
    - if [[ -z ${environment_path} ]]; then exit 1; fi
    - if [[ -d ${environment_path} ]]; then module load ${project_environment}; else source ${conda_installation}/etc/profile.d/conda.sh; fi
    - conda info
    - conda_artifacts_directory='conda-bld'
    - croot="${scratch_path}/$(basename $PWD)/${conda_artifacts_directory}"
    - echo ${conda_artifacts_directory}
    - echo ${croot}

# Jobs using this template *must* include the .linux-cached-environment before script.
.build-cached-environment: &build-cached-environment
  variables:
    GIT_STRATEGY: clone
    environment_file: "environment.yml"
  script:
    - echo ${environment_file}
    - if [[ -z ${environment_file} ]]; then exit 1; fi
    # Job variables
    - aea_modulefiles="${aea_compute_path}/modulefiles"
    - check_directory_variable "${aea_modulefiles}"
    - echo ${CI_MERGE_REQUEST_ID}
    - echo ${CI_COMMIT_BEFORE_SHA}
    - echo ${CI_COMMIT_BRANCH}
    # Always build from the system anaconda installation
    - module unload ${project_environment}
    # Don't rebuild environment for merge request pipelines unless the environment is missing
    - if [[ -d "${environment_path}" ]]; then exists=true; else exists=false; fi
    - if [[ $CI_MERGE_REQUEST_ID ]] && ${exists}; then exit 0; fi
    # Don't rebuild environment for main unless the environment file has changed or the environment doesn't exist
    - files=$(git diff --name-only ${CI_COMMIT_SHA} ${CI_COMMIT_BEFORE_SHA}) || true
    - if [[ $CI_COMMIT_BRANCH == "main" ]]; then production=true; else production=false; fi
    - if [[ "${files}" == *"${environment_file}"* ]]; then modified=true; else modified=false; fi
    - if ${production} && ${exists} && ! ${modified}; then exit 0; fi
    # Re-build the Conda environment on changes to environment files
    - conda env create --prefix ${environment_path} --file ${environment_file} --solver=libmamba --force
    # Remove write permissions from group to avoid accidental environment changes
    - chmod -R 755 ${environment_path}
    # place the common modulefiles in an accessible location
    - cp ${PWD}/modulefiles/* ${aea_modulefiles} || true

.nix-job-environment: &nix-job-environment
  variables:
    GIT_STRATEGY: clone
    conda_installation: "/apps/anaconda/3.12-anaconda-2024.10"
    environment_file: "environment.yml"
  before_script:
    - function check_directory_variable () { echo "$1"; if [[ -z $1 ]] || [[ ! -d $1 ]]; then exit 1; fi; }
    - check_directory_variable "${conda_installation}"
    - echo ${environment_file}
    - if [[ -z ${environment_file} ]]; then exit 1; fi
    # Common job variables
    - prefix="$PWD/conda-environment"
    - conda_pkgs_dirs="$PWD/conda-pkgs"
    - conda_artifacts_directory="conda-bld"
    - echo ${prefix}
    - echo ${conda_pkgs_dirs}
    - echo ${conda_artifacts_directory}
    - if [[ -z ${prefix} ]]; then exit 1; fi
    - if [[ -z ${conda_pkgs_dirs} ]]; then exit 1; fi
    - if [[ -z ${conda_artifacts_directory} ]]; then exit 1; fi
    # Put texlive on PATH for AEA/HPC
    - module load texlive || true
    # Environment creation
    - export CONDA_PKGS_DIRS="${conda_pkgs_dirs}"
    - source ${conda_installation}/etc/profile.d/conda.sh
    - conda info
    - conda env create --prefix ${prefix} --file ${environment_file} --yes
    - conda activate ${prefix}
    - conda info
    # Common job variables
    - croot=${CONDA_PREFIX}/${conda_artifacts_directory}
    - echo ${croot}
    - if [[ -z ${croot} ]]; then exit 1; fi

.fast-test: &fast-test
  script:
    - function check_directory_variable () { echo "$1"; if [[ -z $1 ]] || [[ ! -d $1 ]]; then exit 1; fi; }
    - check_directory_variable "${abaqus_command_prefix}"
    - check_directory_variable "${cubit_command_prefix}"
    - echo ${PARENT_CI_PIPELINE_SOURCE}
    # Job commands
    - scons regression --keep-going --unconditional-build --abaqus-command=${abaqus_command_prefix}/abq2024 --cubit-command=${cubit_command_prefix}/Cubit-16.16/cubit
    - if [[ $PARENT_CI_PIPELINE_SOURCE == "schedule" ]]; then scons systemtest --keep-going --unconditional-build --abaqus-command=${abaqus_command_prefix}/abq2023 --cubit-command=${cubit_command_prefix}/Cubit-16.12/cubit; fi
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/pytest/coverage.xml

.fast-test-no-third-party: &fast-test-no-third-party
  script:
    - scons regression --keep-going
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/pytest/coverage.xml

.style-guide: &style-guide
  script:
    - scons style

.pip-build: &pip-build
  variables:
    distribution_name: "waves"
  script:
    # Job variables
    - distribution_filename=$(echo ${distribution_name} | tr - _)
    - scons pyproject.toml
    - version=$(python -m setuptools_scm)
    - echo ${distribution_name}
    - echo ${distribution_filename}
    - echo ${version}
    - if [[ -z ${distribution_name} ]]; then exit 1; fi
    - if [[ -z ${distribution_filename} ]]; then exit 1; fi
    - if [[ -z ${version} ]]; then exit 1; fi
    # Job commands
    # Conda CI environment active
    - scons install --distribution-name=${distribution_name}
    - python -m venv pip-build-test
    # Python venv environment active
    - source pip-build-test/bin/activate
    - python -m pip install --verbose --disable-pip-version-check --require-virtualenv --no-cache-dir build/dist/${distribution_filename}-${version}.tar.gz pytest pytest-xdist
    - cd pip-build-test/lib/python*/site-packages/waves
    - python -m pytest -vvv -n 4 -m "not systemtest"

.conda-build: &conda-build
  script:
    # Job variables
    - echo ${croot}
    - echo ${recipe_directory}
    - echo ${conda_artifacts_directory}
    - croot_recipe="${croot}/${recipe_directory}"
    - echo ${croot_recipe}
    - if [[ -z ${croot} ]]; then exit 1; fi
    - if [[ -z ${recipe_directory} ]]; then exit 1; fi
    - if [[ -z ${conda_artifacts_directory} ]]; then exit 1; fi
    - if [[ -z ${croot_recipe} ]]; then exit 1; fi
    # Job commands
    # Override default permissions. Set group to rx with no write permissions.
    - umask 0022
    - mkdir ${conda_artifacts_directory}
    - scons pyproject.toml
    - VERSION=$(python -m setuptools_scm) conda mambabuild ${recipe_directory} --channel fierromechanics --channel conda-forge --no-anaconda-upload --croot ${croot_recipe} --output-folder ${conda_artifacts_directory}
    - conda build purge --croot ${croot_recipe}
