******************
Creating Workflows
******************

This project uses three layers of SCons configuration files:

1. SConstruct: the project configuration
2. Workflow SConscript: named after the workflow or simulation, e.g. ``rectangle_compression``
3. Part/Assembly SConscript: named after the part, e.g. ``rectangle``

SConstruct
==========

The project configuration SConstruct file is responsible for configuring project wide variables, command line options,
and parameter sets. The SConstruct file calls workflow SConscript files with the construction environment export 
named ``env``. For example,

.. code-block::

   SConscript(..., exports={"env": env, ...}, ...)

The SConscript calls are constructed in the ``workflow_configurations`` variable as a list of workflow SConscript
file names.

Workflow SConscript
===================

The workflow configuration SConscript files are named after the workflow, assembly, or simulation that they configure.
These files are limited to pass-through operations calling the correct part and assembly configuration files required by
the workflow and workflow specific tasks. They pass the ``env``, and ``parameters`` through to the part or assembly 
SConscript files.

.. code-block::

   Import("env")

   SConscript(..., exports={"env": env, "parameters": parameters, ...}, ...)

Part/Assembly SConscript
========================

The final layer of SConscript files is the part (or assembly) configuration files. These configuration files should
accept the construction environment ``env``. The project ``parameters`` are imported and unpacked into the part task 
definitions.

.. code-block::

   Import("env", "parameters")

   env.Command(
       target=[...],
       source=[...],
       action=[...],
       **parameters,
   )

The part and assembly configuration files do not define their own alias; instead, the alias is automatically 
constructed from the name of the build directory.

The Sconscript files can be spread throughout the source tree. allowing users to structure both source and 
build directories according to their project needs. Simulation workflows are defined in separate SConscript files, 
which keeps each simulation self-contained and easier to manage. This layout supports deeply nested directory trees 
and allows users to maintain a clear separation between parts, workflows, and utility scripts. While this flexibility 
can lead to more verbose SConstruct and SConscript implementations, it enables greater clarity and transparency in 
the build process. Users are encouraged to adopt consistent naming conventions and directory structures to help 
navigate the project efficiently, especially when using command line tools or GUI file browsers.

An example of a workflow configuration may be found in the following files, listed in the SCons configuration order

1. ``SConstruct``
2. ``modsim_package/rectangle_compression``
3. ``modsim_package/rectangle``

When updating or adding a new workflow, be sure to update the workflow description contained in the SConscript file 
so that the project command line help stays up to date.
