#! /usr/bin/env python
"""Rectangle mesh convergence workflow

Requires the following ``SConscript(..., exports={})``

* ``env`` - The SCons construction environment with the following required keys

  * ``datacheck_alias`` - String for the alias collecting the datacheck workflow targets
  * ``regression_alias`` - String for the alias collecting the regression test suite targets
  * ``unconditional_build`` - Boolean flag to force building of conditionally ignored targets
  * ``abaqus`` - String path for the Abaqus executable
"""

import pathlib

from waves.parameter_generators import SET_COORDINATE_KEY
from waves.parameter_generators import CartesianProduct

from modsim_package.python.rectangle_compression_mesh_convergence import parameter_schema

# Inherit the parent construction environment
Import("env")

# Comment used in tutorial code snippets: marker-1

# Simulation variables
build_directory = pathlib.Path(Dir(".").abspath)
workflow_name = build_directory.name
parameter_study_file = build_directory / "parameter_study.h5"
simulation_constants = {
    "width": 1.0,
    "height": 1.0,
    "displacement": -0.01,
}

# Collect the target nodes to build a concise alias for all targets
workflow = []
datacheck = []

# Comment used in tutorial code snippets: marker-2

# Parameter Study with Cartesian Product
parameter_generator = CartesianProduct(
    parameter_schema(),
    output_file=parameter_study_file,
    previous_parameter_study=parameter_study_file,
)
parameter_generator.write()

# Comment used in tutorial code snippets: marker-3

# Geometry
journal_options = "--width ${width} --height ${height}"
workflow.extend(
    env.AbaqusJournal(
        target=["rectangle_geometry.cae", "rectangle_geometry.jnl"],
        source=["#/modsim_package/abaqus/rectangle_geometry.py"],
        subcommand_options=journal_options,
        **simulation_constants,
    )
)

# Partition
journal_options = "--width ${width} --height ${height}"
partition_targets = env.AbaqusJournal(
    target=["rectangle_partition.cae", "rectangle_partition.jnl"],
    source=["#/modsim_package/abaqus/rectangle_partition.py", "rectangle_geometry.cae"],
    subcommand_options=journal_options,
    **simulation_constants,
)
workflow.extend(partition_targets)
partition_cae_node = partition_targets[0]

# Parameterized targets must live inside current simulation_variables for loop
for set_name, parameters in parameter_generator.parameter_study_to_dict().items():
    set_name = pathlib.Path(set_name)
    simulation_variables = {**parameters, **simulation_constants}

    # Comment used in tutorial code snippets: marker-4

    # Mesh
    journal_options = (
        "--global-seed ${global_seed} --input-file ${SOURCES[1].abspath} --output-file ${TARGETS[0].abspath}"
    )
    workflow.extend(
        env.AbaqusJournal(
            target=[
                set_name / "rectangle_mesh.inp",
                set_name / "rectangle_mesh.cae",
                set_name / "rectangle_mesh.jnl",
            ],
            source=[
                "#/modsim_package/abaqus/rectangle_mesh.py",
                partition_cae_node,
            ],
            subcommand_options=journal_options,
            **simulation_variables,
        )
    )

    # SolverPrep
    abaqus_source_list = [
        "#/modsim_package/abaqus/rectangle_compression.inp.in",
        "#/modsim_package/abaqus/assembly.inp",
        "#/modsim_package/abaqus/boundary.inp",
        "#/modsim_package/abaqus/field_output.inp",
        "#/modsim_package/abaqus/materials.inp",
        "#/modsim_package/abaqus/parts.inp",
        "#/modsim_package/abaqus/history_output.inp",
    ]
    abaqus_source_list = [pathlib.Path(source_file) for source_file in abaqus_source_list]
    workflow.extend(
        env.CopySubstfile(
            abaqus_source_list,
            substitution_dictionary=env.SubstitutionSyntax(simulation_variables),
            build_subdirectory=set_name,
        )
    )

    # Comment used in tutorial code snippets: marker-5

    # Abaqus Solve
    solve_source_list = [f"{set_name / source_file.name.rstrip('.in')}" for source_file in abaqus_source_list]
    solve_source_list.append([str(set_name / "rectangle_mesh.inp")])
    job_name = pathlib.Path(solve_source_list[0]).stem
    datacheck_name = f"{job_name}_DATACHECK"
    datacheck_suffixes = ("023", "mdl", "sim", "stt")
    abaqus_options = "-double both"
    datacheck.extend(
        env.AbaqusSolver(
            target=[f"{set_name / datacheck_name}.{suffix}" for suffix in datacheck_suffixes],
            source=solve_source_list,
            job_name=datacheck_name,
            abaqus_options=f"{abaqus_options} -datacheck",
        )
    )

    workflow.extend(
        env.AbaqusSolver(
            target=[f"{set_name / job_name}.sta"],
            source=solve_source_list,
            job_name=job_name,
            abaqus_options=abaqus_options,
        )
    )

    # Extract Abaqus
    extract_source_list = [f"{set_name / job_name}.odb"]
    workflow.extend(
        env.AbaqusExtract(
            target=[f"{set_name / job_name}.h5"],
            source=extract_source_list,
        )
    )

# Comment used in tutorial code snippets: marker-6

# Post-processing
post_processing_source = [
    f"{pathlib.Path(set_name) / job_name}_datasets.h5"
    for set_name in parameter_generator.parameter_study[SET_COORDINATE_KEY].values
]
script_options = "--input-file ${SOURCES[2:].abspath}"
script_options += " --output-file ${TARGET.file} --x-units mm/mm --y-units MPa"
script_options += " --parameter-study-file ${SOURCES[1].abspath}"
workflow.extend(
    env.PythonScript(
        target=["stress_strain_comparison.pdf", "stress_strain_comparison.csv"],
        source=["#/modsim_package/python/post_processing.py", parameter_study_file.name] + post_processing_source,
        subcommand_options=script_options,
    )
)

script_options = (
    "--input-file ${post_processing_source}"
    " --output-file ${TARGET.file} --x-units mm --y-units MPa --x-var global_seed --y-var S"
    " --parameter-study-file ${SOURCES[1].file}"
    " --selection-dict ${SOURCES[2].abspath}"
)
workflow.extend(
    env.PythonScript(
        target=["mesh_convergence_stress.pdf", "mesh_convergence_stress.csv"],
        source=[
            "#/modsim_package/python/post_processing.py",
            parameter_study_file.name,
            "#/modsim_package/python/mesh_convergence_stress.yaml",
        ] + post_processing_source,
        subcommand_options=script_options,
        post_processing_source=post_processing_source,
    )
)

# Collector alias based on parent directory name
env.Alias(workflow_name, workflow)
env.Alias(f"{workflow_name}_datacheck", datacheck)
env.Alias(env["datacheck_alias"], datacheck)
env.Alias(env["regression_alias"], datacheck)

if not env["unconditional_build"] and not env["ABAQUS_PROGRAM"]:
    print(f"Program 'abaqus' was not found in construction environment. Ignoring '{workflow_name}' target(s)")
    Ignore([".", workflow_name], workflow)
    Ignore([".", f"{workflow_name}_datacheck"], datacheck)
    Ignore([".", env["datacheck_alias"], env["regression_alias"]], datacheck)
