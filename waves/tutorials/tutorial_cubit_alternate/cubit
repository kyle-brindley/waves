#! /usr/bin/env python
"""Rectangle compression workflow: geometry, partition, mesh

Requires the following ``SConscript(..., exports={})``

* ``env`` - The SCons construction environment with the following required keys

  * ``cubit_source_abspath`` - String absolute path to the project's Cubit journal files
  * ``unconditional_build`` - Boolean flag to force building of conditionally ignored targets

* ``envCubit`` - The Cubit Python SCons construction environment with the following required keys

  * ``python`` - String path for the Cubit Python intepreter

* ``element_type`` - The Cubit 4 node quadrilateral element type
* ``solver`` - The target solver to use when writing a mesh file
"""

import pathlib

import waves

# Inherit the parent construction environment
Import("env", "envCubit", "element_type", "solver")

# Set project-wide paths with os-agnostic path separators
cubit_source_abspath = env["cubit_source_abspath"]

# Simulation variables
build_directory = pathlib.Path(Dir(".").abspath)
workflow_name = build_directory.name

# Collect the target nodes to build a concise alias for all targets
workflow = []

# Rectangle 2D
# Geometry
journal_file = "cube_geometry"
journal_options = ""
workflow.extend(
    envCubit.PythonScript(
        target=[f"{journal_file}.cub"],
        source=[f"{cubit_source_abspath / journal_file}.py"],
        subcommand_options=journal_options,
    )
)

# Partition
journal_file = "cube_partition"
journal_options = ""
workflow.extend(
    envCubit.PythonScript(
        target=[f"{journal_file}.cub"],
        source=[f"{cubit_source_abspath / journal_file}.py", "cube_geometry.cub"],
        subcommand_options=journal_options,
    )
)

# Mesh
if solver.lower() == "abaqus":
    mesh_extension = "inp"
elif solver.lower() in ["sierra", "adagio"]:
    mesh_extension = "g"
else:
    raise RuntimeError(f"Unknown solver '{solver}'")
journal_file = "cube_mesh"
journal_options = "--element-type ${element_type} --solver ${solver}"
workflow.extend(
    envCubit.PythonScript(
        target=[f"{journal_file}.{mesh_extension}", f"{journal_file}.cub"],
        source=[f"{cubit_source_abspath / journal_file}.py", "cube_partition.cub"],
        subcommand_options=journal_options,
        element_type=element_type,
        solver=solver,
    )
)


# Cube 3D
# Geometry
journal_file = "cube_geometry"
journal_options = ""
workflow.extend(
    envCubit.PythonScript(
        target=[f"{journal_file}.cub"],
        source=[f"{cubit_source_abspath / journal_file}.py"],
        subcommand_options=journal_options,
    )
)

# Partition
journal_file = "cube_partition"
journal_options = ""
workflow.extend(
    envCubit.PythonScript(
        target=[f"{journal_file}.cub"],
        source=[f"{cubit_source_abspath / journal_file}.py", "cube_geometry.cub"],
        subcommand_options=journal_options,
    )
)

# Mesh
if solver.lower() == "abaqus":
    mesh_extension = "inp"
elif solver.lower() in ["sierra", "adagio"]:
    mesh_extension = "g"
else:
    raise RuntimeError(f"Unknown solver '{solver}'")
journal_file = "cube_mesh"
journal_options = "--element-type ${element_type} --solver ${solver}"
workflow.extend(
    envCubit.PythonScript(
        target=[f"{journal_file}.{mesh_extension}", f"{journal_file}.cub"],
        source=[f"{cubit_source_abspath / journal_file}.py", "cube_partition.cub"],
        subcommand_options=journal_options,
        element_type=element_type,
        solver=solver,
    )
)

# Collector alias based on parent directory name
envCubit.Alias(f"{workflow_name}_cubit", workflow)

if not env["unconditional_build"] and not envCubit["python"]:
    print(
        "The Cubit Python interpreter was not found in the construction environment. "
        f"Ignoring '{workflow_name}' target(s)"
    )
    Ignore([".", workflow_name], workflow)
