#! /usr/bin/env python
"""Rectangle compression workflow

Requires the following ``SConscript(..., exports={})``

* ``env`` - The SCons construction environment with the following required keys

  * ``abaqus_source_abspath`` - String absolute path to the project's Abaqus journal files
  * ``unconditional_build`` - Boolean flag to force building of conditionally ignored targets
  * ``abaqus`` - String path for the Abaqus executable
"""

import pathlib

# Inherit the parent construction environment
Import("env")

# Set project-wide paths with os-agnostic path separators
abaqus_source_abspath = env["abaqus_source_abspath"]

# Simulation variables
build_directory = pathlib.Path(Dir(".").abspath)
workflow_name = build_directory.name

# Comment used in tutorial code snippets: marker-1

# Collect the target nodes to build a concise alias for all targets
workflow = []
datacheck = []

# Geometry
journal_options = ""
workflow.extend(
    env.AbaqusJournal(
        target=["rectangle_geometry.cae", "rectangle_geometry.jnl"],
        source=[abaqus_source_abspath / "rectangle_geometry.py"],
        subcommand_options=journal_options,
    )
)

# Comment used in tutorial code snippets: marker-2

# Partition
journal_options = ""
workflow.extend(
    env.AbaqusJournal(
        target=["rectangle_partition.cae", "rectangle_partition.jnl"],
        source=[abaqus_source_abspath / "rectangle_partition.py", "rectangle_geometry.cae"],
        subcommand_options=journal_options,
    )
)

# Mesh
journal_options = ""
workflow.extend(
    env.AbaqusJournal(
        target=["rectangle_mesh.inp", "rectangle_mesh.cae", "rectangle_mesh.jnl"],
        source=[abaqus_source_abspath / "rectangle_mesh.py", "rectangle_partition.cae"],
        subcommand_options=journal_options,
    )
)

# Comment used in tutorial code snippets: marker-3

# SolverPrep
abaqus_source_list = [
    abaqus_source_abspath / "rectangle_compression.inp",
    abaqus_source_abspath / "assembly.inp",
    abaqus_source_abspath / "boundary.inp",
    abaqus_source_abspath / "field_output.inp",
    abaqus_source_abspath / "materials.inp",
    abaqus_source_abspath / "parts.inp",
    abaqus_source_abspath / "history_output.inp",
]
abaqus_source_list = [pathlib.Path(source_file) for source_file in abaqus_source_list]
workflow.extend(env.CopySubstfile(abaqus_source_list))

# Comment used in tutorial code snippets: marker-4

# Abaqus Solve
solve_source_list = [source_file.name.rstrip(".in") for source_file in abaqus_source_list]
solve_source_list.append(["rectangle_mesh.inp"])
job_name = pathlib.Path(solve_source_list[0]).stem
datacheck_name = f"{job_name}_DATACHECK"
datacheck_suffixes = ("023", "mdl", "sim", "stt")
abaqus_options = "-double both"
datacheck.extend(
    env.AbaqusSolver(
        target=[f"{datacheck_name}.{suffix}" for suffix in datacheck_suffixes],
        source=solve_source_list,
        job_name=datacheck_name,
        abaqus_options=f"{abaqus_options} -datacheck",
    )
)

# Comment used in tutorial code snippets: marker-5

workflow.extend(
    env.AbaqusSolver(
        target=[f"{job_name}.sta"],
        source=solve_source_list,
        job_name=job_name,
        abaqus_options=abaqus_options,
    )
)

# Comment used in tutorial code snippets: marker-6

# Collector alias based on parent directory name
env.Alias(workflow_name, workflow)
env.Alias(f"{workflow_name}_datacheck", datacheck)

if not env["unconditional_build"] and not env["ABAQUS_PROGRAM"]:
    print(f"Program 'abaqus' was not found in construction environment. Ignoring '{workflow_name}' target(s)")
    Ignore([".", workflow_name], workflow)
    Ignore([".", f"{workflow_name}_datacheck"], datacheck)
