#! /usr/bin/env python
"""Rectangle model's Geometry and Partition task definitions

Requires the following ``SConscript(..., exports={})``

* ``env`` - The SCons construction environment with the following required keys


* ``simulation_variables`` - The dictionary of simulation variables with the following required keys

  * ``'global_seed'`` - The rectangle model global seed size
  * ``'displacement'`` - The rectangle model uniaxial displacement

* ``workflow`` - list of targets in the main workflow
* ``datacheck`` - list of targets in the datacheck workflow

Returns the following variables

* ``workflow`` - updated list of targets in the main workflow
* ``datacheck`` - updated list of targets in the datacheck workflow

Example usage:

.. code-block::

   import pathlib

   env = waves.scons_extensions.WAVESEnvironment()
   project_dir = pathlib.Path(Dir(".").abspath)

   workflow = []
   datacheck = []

   nominal_workflow, nominal_datacheck = SConscript(
       "rectangle_mesh_solverpep_solve_extract.scons",
       exports={
           "env": env,
           "simulation_variables": simulation_variables,
           "workflow": workflow,
           "datacheck": datacheck
       },
       duplicate=False)

   for set_name in [f"parmameter_set{number}" for number in range(4)]
       parameters_workflow, parameter_datacheck = SConscript(
           "rectangle_mesh_solverpep_solve_extract.scons",
           variant_dir=set_name,
           exports=["env", "simulation_variables", "workflow", "datacheck")
           duplicate=False)
"""
import pathlib


# Inherit the parent construction environment
Import(["env", "simulation_variables", "workflow", "datacheck"])

# Simulation variables
build_directory = pathlib.Path(Dir(".").abspath)

# Mesh
workflow.extend(
    env.AbaqusJournal(
        target=["rectangle_mesh.inp", "rectangle_mesh.cae", "rectangle_mesh.jnl"],
        source=["#/modsim_package/abaqus/rectangle_mesh.py", "rectangle_partition.cae"],
        subcommand_options="--global-seed ${global_seed}",
        **simulation_variables,
    )
)

# SolverPrep
abaqus_source_list = [
    "#/modsim_package/abaqus/rectangle_compression.inp.in",
    "#/modsim_package/abaqus/assembly.inp",
    "#/modsim_package/abaqus/boundary.inp",
    "#/modsim_package/abaqus/field_output.inp",
    "#/modsim_package/abaqus/materials.inp",
    "#/modsim_package/abaqus/parts.inp",
    "#/modsim_package/abaqus/history_output.inp",
]
abaqus_source_list = [pathlib.Path(source_file) for source_file in abaqus_source_list]
workflow.extend(
    env.CopySubstfile(
        abaqus_source_list,
        substitution_dictionary=env.SubstitutionSyntax(simulation_variables),
    )
)

# Abaqus Solve
solve_source_list = [source_file.name.rstrip(".in") for source_file in abaqus_source_list]
solve_source_list.append("rectangle_mesh.inp")
datacheck_suffixes = ("023", "mdl", "sim", "stt")
abaqus_options = "-double both"
datacheck.extend(
    env.AbaqusSolver(
        target=[f"rectangle_compression_DATACHECK.{suffix}" for suffix in datacheck_suffixes],
        source=solve_source_list,
        job="rectangle_compression_DATACHECK",
        program_options=f"{abaqus_options} -datacheck",
    )
)

workflow.extend(
    env.AbaqusSolver(
        target=["rectangle_compression.odb"],
        source=solve_source_list,
        job="rectangle_compression",
        program_options=abaqus_options,
    )
)

# Extract Abaqus
extract_source_list = ["rectangle_compression.odb"]
workflow.extend(
    env.AbaqusExtract(
        target=["rectangle_compression.h5"],
        source=extract_source_list,
    )
)

Return(["workflow", "datacheck"])
