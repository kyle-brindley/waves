#! /usr/bin/env python
"""Rectangle model's Geometry and Partition task definitions

Requires the following ``SConscript(..., exports={})``

* ``env`` - The SCons construction environment with the following required keys

  * ``abaqus_source_abspath`` - String absolute path to the project's Abaqus journal files

* ``simulation_variables`` - The dictionary of simulation variables with the following required keys

  * ``'global_seed'`` - The rectangle model global seed size
  * ``'displacement'`` - The rectangle model uniaxial displacement

* ``workflow`` - list of targets in the main workflow
* ``datacheck`` - list of targets in the datacheck workflow

Returns the following variables

* ``workflow`` - updated list of targets in the main workflow
* ``datacheck`` - updated list of targets in the datacheck workflow

Example usage:

.. code-block::

   import pathlib

   env = waves.scons_extensions.WAVESEnvironment()
   project_dir = pathlib.Path(Dir(".").abspath)
   abaqus_source_dir = "modsim_package/abaqus"
   env["abaqus_source_abspath"] = project_dir / abaqus_source_dir

   workflow = []
   datacheck = []

   nominal_workflow, nominal_datacheck = SConscript(
       "rectangle_mesh_solverpep_solve_extract.scons",
       exports={
           "env": env,
           "simulation_variables": simulation_variables,
           "workflow": workflow,
           "datacheck": datacheck
       },
       duplicate=False)

   for set_name in [f"parmameter_set{number}" for number in range(4)]
       parameters_workflow, parameter_datacheck = SConscript(
           "rectangle_mesh_solverpep_solve_extract.scons",
           variant_dir=set_name,
           exports=["env", "simulation_variables", "workflow", "datacheck")
           duplicate=False)
"""
import pathlib


# Inherit the parent construction environment
Import(["env", "simulation_variables", "workflow", "datacheck"])

# Set project-wide paths with os-agnostic path separators
abaqus_source_abspath = env["abaqus_source_abspath"]

# Simulation variables
build_directory = pathlib.Path(Dir(".").abspath)

# Mesh
journal_options = "--global-seed ${global_seed}"
workflow.extend(
    env.AbaqusJournal(
        target=["rectangle_mesh.inp", "rectangle_mesh.cae", "rectangle_mesh.jnl"],
        source=[abaqus_source_abspath / "rectangle_mesh.py", "rectangle_partition.cae"],
        subcommand_options=journal_options,
        **simulation_variables,
    )
)

# SolverPrep
abaqus_source_list = [
    abaqus_source_abspath / "rectangle_compression.inp.in",
    abaqus_source_abspath / "assembly.inp",
    abaqus_source_abspath / "boundary.inp",
    abaqus_source_abspath / "field_output.inp",
    abaqus_source_abspath / "materials.inp",
    abaqus_source_abspath / "parts.inp",
    abaqus_source_abspath / "history_output.inp",
]
abaqus_source_list = [pathlib.Path(source_file) for source_file in abaqus_source_list]
workflow.extend(
    env.CopySubstfile(
        abaqus_source_list,
        substitution_dictionary=env.SubstitutionSyntax(simulation_variables),
    )
)

# Abaqus Solve
solve_source_list = [source_file.name.rstrip(".in") for source_file in abaqus_source_list]
solve_source_list.append(["rectangle_mesh.inp"])
job_name = pathlib.Path(solve_source_list[0]).stem
datacheck_name = f"{job_name}_DATACHECK"
datacheck_suffixes = ("023", "mdl", "sim", "stt")
abaqus_options = "-double both"
datacheck.extend(
    env.AbaqusSolver(
        target=[f"{datacheck_name}.{suffix}" for suffix in datacheck_suffixes],
        source=solve_source_list,
        job_name=datacheck_name,
        abaqus_options=f"{abaqus_options} -datacheck",
    )
)

workflow.extend(
    env.AbaqusSolver(
        target=[f"{job_name}.sta"],
        source=solve_source_list,
        job_name=job_name,
        abaqus_options=abaqus_options,
    )
)

# Extract Abaqus
extract_source_list = [f"{job_name}.odb"]
workflow.extend(
    env.AbaqusExtract(
        target=[f"{job_name}.h5"],
        source=extract_source_list,
    )
)

Return(["workflow", "datacheck"])
