#! /usr/bin/env python
"""Rectangle compression workflow: Abaqus solve

Requires the following ``SConscript(..., exports={})``

* ``env`` - The SCons construction environment with the following required keys

  * ``unconditional_build`` - Boolean flag to force building of conditionally ignored targets
  * ``abaqus`` - String path for the Abaqus executable
  * ``cubit`` - String path for the Cubit executable
"""

import pathlib

# Inherit the parent construction environment
Import("env")

# Simulation variables
build_directory = pathlib.Path(Dir(".").abspath)
workflow_name = build_directory.name

# Collect the target nodes to build a concise alias for all targets
workflow = []
datacheck = []

element_type = "QUAD"
solver = "abaqus"
SConscript("cubit", exports={"env": env, "element_type": element_type, "solver": solver}, duplicate=False)

# Modify mesh target(s) element type.
# Linux style sed command options must be modified for macOS. Command must be modified if on Windows.
env.AddPostAction("rectangle_mesh.inp", "sed -i 's/CPE4/CPS4/g' ${TARGET.abspath}")

# SolverPrep
abaqus_source_list = [
    "#/modsim_package/abaqus/rectangle_compression.inp",
    "#/modsim_package/abaqus/assembly.inp",
    "#/modsim_package/abaqus/boundary.inp",
    "#/modsim_package/abaqus/field_output.inp",
    "#/modsim_package/abaqus/materials.inp",
    "#/modsim_package/abaqus/parts.inp",
    "#/modsim_package/abaqus/history_output.inp",
]
abaqus_source_list = [pathlib.Path(source_file) for source_file in abaqus_source_list]
workflow.extend(env.CopySubstfile(abaqus_source_list))

# Abaqus Solve
solve_source_list = [source_file.name.rstrip(".in") for source_file in abaqus_source_list]
solve_source_list.append("rectangle_mesh.inp")
datacheck_suffixes = ("023", "mdl", "sim", "stt")
abaqus_options = "-double both"
datacheck.extend(
    env.AbaqusSolver(
        target=[f"rectangle_compression_DATACHECK.{suffix}" for suffix in datacheck_suffixes],
        source=solve_source_list,
        job="rectangle_compression_DATACHECK",
        program_options=f"{abaqus_options} -datacheck",
    )
)

workflow.extend(
    env.AbaqusSolver(
        target=["rectangle_compression.sta"],
        source=solve_source_list,
        job="rectangle_compression",
        program_options=abaqus_options,
    )
)

# Collector alias based on parent directory name
env.Alias(workflow_name, workflow)
env.Alias(f"{workflow_name}_datacheck", datacheck)

if not env["unconditional_build"] and not env["ABAQUS_PROGRAM"]:
    print(f"Program 'abaqus' was not found in construction environment. Ignoring '{workflow_name}' target(s)")
    Ignore([".", workflow_name], workflow)
    Ignore([".", f"{workflow_name}_datacheck"], datacheck)
